{"version":3,"file":"static/js/489.8f7ec6a4.chunk.js","mappings":"wMACA,EAA0B,yBAA1B,EAAiE,6B,uCC8BjE,MAvBA,SAAwBA,GAEpB,IAAIC,EAAeD,EAAME,aAAaC,KAAI,SAAAC,GAAI,OAAG,SAAC,IAAI,CAACC,QAAWD,EAAKC,QAASC,WAAYF,EAAKE,YAAiBF,EAAKG,GAAK,IAI5H,OACI,UAACC,EAAA,EAAS,CAACC,OAAK,EAACC,UAAU,OAAM,WAC7B,wBAAKV,EAAMW,cACX,SAACC,EAAA,EAAS,CAACF,UAAU,cAAcG,QAAQ,QAAO,SAC7CZ,KAEL,UAACa,EAAA,EAAI,YACD,UAACA,EAAA,QAAU,CAACJ,UAAU,OAAM,WACxB,SAACI,EAAA,QAAU,6BACX,SAACA,EAAA,UAAY,CAACC,SAVV,SAACC,GAAC,OAAKhB,EAAMiB,cAAcD,EAAEE,OAAOC,MAAM,EAUPA,MAAOnB,EAAMoB,qBAEpD,SAACC,EAAA,EAAM,CAACC,QAbP,WAAH,OAAStB,EAAMuB,YAAa,EAaGb,UAAU,OAAOG,QAAQ,UAAS,uBAKnF,E,UC7BA,EAAuB,0BCgBvB,MATA,SAAoBb,GAChB,OACI,SAACY,EAAA,OAAc,CAACF,UAAWc,EAAY,UAC3B,SAAC,KAAO,CAACd,UAAU,WAAWe,GAAE,mBAAczB,EAAMO,IAAK,SAAEP,EAAM0B,QAGrF,E,UCkCA,MAhCA,SAAiB1B,GAGb,KADe2B,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,YAAYC,MAAM,IAExD,OAAO,SAAC,KAAQ,CAACL,GAAG,WAGxB,IAAIM,EAAc/B,EAAMgC,KAAKC,YAAY9B,KAAI,SAAAC,GAAI,OAAI,SAAC,EAAU,CAACG,GAAIH,EAAKG,GAAImB,KAAMtB,EAAKsB,MAAWtB,EAAKG,GAAM,IAC3G2B,EAAiBlC,EAAMgC,KAAKC,YAAY9B,KAAI,SAAAC,GAAI,OAAI,SAAC,KAAK,CAAC+B,KAAI,WAAM/B,EAAKG,IAC1E6B,SAAS,SAAC,EAAc,CACpBb,WAAYvB,EAAMuB,WAClBN,cAAejB,EAAMiB,cACrBN,WAAYP,EAAKsB,KACjBxB,aAAcF,EAAMgC,KAAK9B,aACzBkB,eAAgBpB,EAAMgC,KAAKZ,kBANsDhB,EAAKG,GAQhF,IAGd,OACI,UAACC,EAAA,EAAS,CAACC,OAAK,EAACC,UAAS,UAAKc,GAAiB,WAC5C,UAACZ,EAAA,EAAS,CAACF,UAAWc,EAAmB,WACrC,oCACCO,MAEL,SAAC,KAAM,UACFG,MAIjB,EC3BA,MAbA,SAA0BlC,GAEtB,IAAM4B,GAAQD,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMS,cAAc,IACjDC,GAAWC,EAAAA,EAAAA,MAIjB,OAEQ,SAAC,EAAO,CAACP,KAAMJ,EAAOL,WAJb,WAAH,OAASe,GAASE,EAAAA,EAAAA,MAA2B,EAILvB,cAHlC,SAACwB,GAAI,OAAKH,GAASI,EAAAA,EAAAA,IAA2BD,GAAM,GAK5E,C","sources":["webpack://samurai/./src/components/content/dialogs/dialogs.module.scss?449b","components/content/dialogs/dialog/dialogMessages.jsx","webpack://samurai/./src/components/content/dialogs/dialog/dialog_links/dialogLinks.module.scss?f06f","components/content/dialogs/dialog/dialog_links/dialogLink.jsx","components/content/dialogs/dialogs.jsx","components/content/dialogs/dialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"dialogs_dialogs__RtoyG\",\"dialogsItem\":\"dialogs_dialogsItem__t5Gaj\",\"listItem\":\"dialogs_listItem__i6GPa\"};","import Post from '../../profile/MyPosts/post/post';\r\nimport Container from 'react-bootstrap/esm/Container';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport \"./dialog.scss\";\r\n\r\n\r\nfunction DialogMessages(props) {\r\n\r\n    let messagesList = props.messagesData.map(item=> <Post message = {item.message} likesCount={item.likesCount} key={item.id}/>)\r\n    \r\n    let addMessage = () => props.addMessage();\r\n    let changeMessage = (e) => props.changeMessage(e.target.value)\r\n    return (\r\n        <Container fluid className='mt-3'>\r\n            <h4>{props.friendName}</h4>\r\n            <ListGroup className='dialogSpace' variant=\"flush\">\r\n                {messagesList}\r\n            </ListGroup>\r\n            <Form>\r\n                <Form.Group className=\"mb-3\">\r\n                    <Form.Label>Enter message</Form.Label>\r\n                    <Form.Control onChange={changeMessage} value={props.newMessageText}></Form.Control>\r\n                </Form.Group>\r\n                    <Button onClick={addMessage} className='mb-3' variant='primary'>Send</Button>\r\n            </Form>\r\n        </Container>\r\n    )\r\n\r\n}\r\nexport default DialogMessages;","// extracted by mini-css-extract-plugin\nexport default {\"link\":\"dialogLinks_link__gxGfr\"};","import React from \"react\";\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\n\r\nimport styles from \"./dialogLinks.module.scss\";\r\n\r\nfunction DialogLink(props) {\r\n    return(\r\n        <ListGroup.Item className={styles.link}>\r\n                    <NavLink className=\"nav-link\" to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n        </ListGroup.Item>\r\n    );\r\n}\r\n\r\n\r\nexport default DialogLink;","import React from \"react\";\r\nimport Container from \"react-bootstrap/esm/Container\";\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\n\r\nimport styles from \"./dialogs.module.scss\";\r\nimport DialogMessages from \"./dialog/dialogMessages\";\r\nimport DialogLink from \"./dialog/dialog_links/dialogLink\";\r\n\r\nimport {\r\n    Routes,\r\n    Route,\r\n    Navigate,\r\n} from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\n\r\nfunction Dialogs(props) {\r\n\r\n    const isAuth = useSelector(state => state.authReducer.isAuth);\r\n    if (!isAuth) {\r\n        return <Navigate to=\"/login\"/>\r\n    } \r\n\r\n    let dialogLinks = props.data.dialogsList.map(item => <DialogLink id={item.id} name={item.name} key={item.id} />)\r\n    let dialogMessages = props.data.dialogsList.map(item => <Route path={`/${item.id}`} key={item.id}\r\n        element={<DialogMessages\r\n            addMessage={props.addMessage}\r\n            changeMessage={props.changeMessage}\r\n            friendName={item.name}\r\n            messagesData={props.data.messagesData}\r\n            newMessageText={props.data.newMessageText} \r\n            />\r\n        }></Route>)\r\n\r\n\r\n    return (\r\n        <Container fluid className={`${styles.dialogs}`}>\r\n            <ListGroup className={styles.dialogsItem}>\r\n                <h2>Dialogs</h2>\r\n                {dialogLinks}\r\n            </ListGroup>\r\n            <Routes>\r\n                {dialogMessages}\r\n            </Routes>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { addMessageActionCreator, changeMessageActionCreator } from \"../../../redux/dialogsReducer\";\r\nimport Dialogs from \"./dialogs\";\r\n\r\n\r\nfunction DialogsContainer(props) {\r\n\r\n    const state = useSelector(state => state.dialogsReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    let addMessage = () => dispatch(addMessageActionCreator());\r\n    let changeMessage = (text) => dispatch(changeMessageActionCreator(text))\r\n    return (\r\n\r\n            <Dialogs data={state} addMessage={addMessage} changeMessage={changeMessage} />\r\n    )\r\n}\r\n\r\nexport default DialogsContainer;"],"names":["props","messagesList","messagesData","map","item","message","likesCount","id","Container","fluid","className","friendName","ListGroup","variant","Form","onChange","e","changeMessage","target","value","newMessageText","Button","onClick","addMessage","styles","to","name","useSelector","state","authReducer","isAuth","dialogLinks","data","dialogsList","dialogMessages","path","element","dialogsReducer","dispatch","useDispatch","addMessageActionCreator","text","changeMessageActionCreator"],"sourceRoot":""}